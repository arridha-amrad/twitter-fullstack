// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserStrategy {
  EMAIL
  GOOGLE
  FACEBOOK
}

model User {
  id           String       @id @default(cuid())
  username     String       @unique
  email        String       @unique
  avatarUrl    String?      @map("avatar_url") @db.Text
  fullname     String
  password     String       @db.Text
  wallpaper    String?      @db.Text
  userStrategy UserStrategy @map("user_strategy")
  tokens       Token[]
  likes        Like[]
  posts        Post[]
  tweets       Tweet[]
  retweets     Repost[]
  followers    User[]       @relation(name: "user_follows")
  followings   User[]       @relation(name: "user_follows")
  media        File[]
  createdAt    DateTime?    @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("users")
}

model Token {
  id     Int    @id @default(autoincrement())
  name   String @unique
  value  String @db.Text
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@index([userId])
  @@map("tokens")
}

model Like {
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([postId, userId])
  @@index([userId])
  @@index([postId])
  @@map("likes")
}

model Post {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  body         String   @db.Text
  authorId     String   @map("author_id")
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  quoteTweetId String?  @unique @map("quote_tweet_id")
  quoteTweet   Tweet?   @relation("Quote", fields: [quoteTweetId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  likes        Like[]
  files        File[]
  reposts      Repost[]
  tweets       Tweet[]  @relation("Tweets")
  parent       Tweet[]  @relation("Parents")
  children     Tweet[]  @relation("Children")

  @@index([quoteTweetId])
  @@index([authorId])
  @@map("posts")
}

enum TweetType {
  DEFAULT
  REPLY
  RETWEET
  QUOTE
}

model Tweet {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now()) @map("created_at")
  deletedAt    DateTime? @map("deleted_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  postId       String?   @map("post_id")
  userId       String    @map("user_id")
  type         TweetType @default(DEFAULT)
  post         Post?     @relation("Tweets", fields: [postId], references: [id], onDelete: SetNull)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotePost    Post?     @relation("Quote")
  parentPost   Post?     @relation("Parents", fields: [parentPostId], references: [id])
  parentPostId String?
  childPost    Post?     @relation("Children", fields: [childPostId], references: [id])
  childPostId  String?

  @@index([parentPostId])
  @@index([childPostId])
  @@index([userId])
  @@index([postId])
  @@map("tweets")
}

model File {
  id        BigInt   @id @default(autoincrement())
  url       String   @db.Text
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([postId])
  @@index([userId])
  @@map("files")
}

model Repost {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
  @@map("reposts")
}
